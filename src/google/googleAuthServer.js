export { handleGoogleAuthResponse, writeAuthorizationURL, oauth2Client, handleFormLoad };
import { postEvents, eventsToPost } from './googleCalendar.js';
import { readFile } from '../app.js';
import { google } from 'googleapis';
const GOOGLE_CLIENT_ID = `564813831875-k9pb4mc6qh31agppeaos7ort3ng16gni.apps.googleusercontent.com`;
const GOOGLE_CLIENT_SECRET = `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`;
const GOOGLE_REDIRECT_URL = `http://localhost:3000/googleConsent/`;
import url from 'url';

//google OAuth2 client. Contains necessary information regarding google project
const oauth2Client = new google.auth.OAuth2(GOOGLE_CLIENT_ID, GOOGLE_CLIENT_SECRET, GOOGLE_REDIRECT_URL);

//scopes that user is prompted for when signing in.
const scopes = [
    'https://www.googleapis.com/auth/calendar https://www.googleapis.com/auth/calendar.events' //google calendar scopes.
];

//AuthorizationURL is generated by google using the scopes and OAuthClient
const authorizationUrl = oauth2Client.generateAuthUrl({
    access_type: 'offline',
    scope: scopes,
    include_granted_scopes: true
});

//function that handles the redirect from google after client consent to scopes.
async function handleGoogleAuthResponse(request, response) {
    let googleRes = url.parse(request.url, true).query; //google response is imbedded in url. url.Parse returns url-object containing "-query" entry.
    if (googleRes.error) {
        //if url-response is an error (user did not concent.)
        response.writeHead(301, { Location: 'http://localhost:3000/form?' + 'EventsPosted=Error' }); //Redirect to errorpage
        response.end();
    } else {
        //if user did concent
        oauth2Client.getToken(googleRes.code).then(({ tokens }) => {
            oauth2Client.setCredentials(tokens); //tokens is added to credentials in oauth2Client
            response.writeHead(301, { Location: 'http://localhost:3000/form?' + 'EventsPosted=Success' }); //Redirects to the form.html page after the authorization process has happened
            response.end();
            postEvents(eventsToPost); //posts events to google calendar.
        });
    }
}

//function to send google redirect url to client on fetch
function writeAuthorizationURL(request, response) {
    let obj = { url: authorizationUrl }; //creates object containing url
    response.writeHead(200, { 'Content-Type': 'application/json' });
    response.write(JSON.stringify(obj)); //stringifies object to send it accross web
    response.end();
}

function handleFormLoad(request, response) {
    let filePath = './public/form.html';
    readFile(filePath, request, response);
}
